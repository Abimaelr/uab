{"version":3,"sources":["Components/Counter.jsx","assets/particlesjs-config.js","Components/Cover.jsx","App.js","reportWebVitals.js","index.js"],"names":["seconds","hours","minutes","Counter","useState","Seconds","setSeconds","Minutes","setMinutes","Hours","setHours","Days","setDays","start","setStart","calculateTime","date","Date","getTime","now","format","time","value","length","Math","floor","fSeconds","fMinutes","fHours","fDays","console","log","useEffect","setTimeout","id","className","opitions","background","color","fpsLimit","interactivity","detectsOn","events","onClick","enable","mode","onHover","resize","modes","bubble","distance","duration","opacity","size","push","quantity","repulse","particles","links","width","collisions","move","direction","outMode","random","speed","straight","number","density","value_area","shape","type","detectRetina","Cover","options","name","alert","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca901226.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport '../assets/css/counter.css'\nconst seconds = 1000;\nconst minutes = seconds*60;\nconst hours = minutes*60;\nconst days = hours*24;\n\nfunction Counter() {\n    const [Seconds, setSeconds] = useState(0);\n    const [Minutes, setMinutes] = useState(0);\n    const [Hours, setHours] = useState(0);\n    const [Days, setDays] = useState(0);\n    const [start, setStart] = useState(false);\n\n    const calculateTime = () => {\n        const date = new Date(\"2021-08-25T15:35:58.000Z\").getTime() - Date.now();\n       \n        const format = (time) => {\n            const value = `${time}`;\n            if(value.length < 2) return `0${value}`;\n            else return value;\n        }\n        const time = Math.floor(date/seconds);\n        const fSeconds = Math.floor(date/seconds) % 60;\n        const fMinutes = Math.floor(date/minutes) % 60;\n        const fHours = Math.floor(date/hours) % 24;\n        const fDays = Math.floor(date/days);\n        if(time > 0) {\n            setStart(true);\n        }\n        console.log(time > 0)\n        setSeconds(format(fSeconds));\n        setMinutes(format(fMinutes));\n        setHours(format(fHours));\n        setDays(fDays);\n    }\n    useEffect(() => {\n        calculateTime();\n      \n    }, [])\n    \n    setTimeout(() => {\n        calculateTime();\n    },1000);\n    \n    if(!start) return (<div></div>);\n\n    if(start) return (\n        <div id=\"counter\">\n            <div className=\"dateItem\">\n                <h2>{Days}</h2>\n                <p>Dias</p>\n            </div>\n            <div className=\"dateItem\">\n                <h2>{Hours}</h2>\n                <p>Horas</p>\n            </div>\n            <div className=\"dateItem\">\n                <h2>{Minutes}</h2>\n                <p>Minutos</p>\n            </div>\n            <div className=\"dateItem\">\n                <h2>{Seconds}</h2>\n                <p>Segundos</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Counter;\n","const opitions = {\n  background: {\n    color: {\n      value: \"transparent\",\n    },\n  },\n  fpsLimit: 60,\n  interactivity: {\n    detectsOn: \"canvas\",\n    events: {\n      onClick: {\n        enable: false,\n        mode: \"push\",\n      },\n      onHover: {\n        enable: false,\n        mode: \"repulse\",\n      },\n      resize: true,\n    },\n    modes: {\n      bubble: {\n        distance: 400,\n        duration: 2,\n        opacity: 0.8,\n        size: 40,\n      },\n      push: {\n        quantity: 4,\n      },\n      repulse: {\n        distance: 200,\n        duration: 0.4,\n      },\n    },\n  },\n  particles: {\n    color: {\n      value: \"transparent\",\n    },\n    links: {\n      color: \"#FFFF\",\n      distance: 100,\n      enable: true,\n      opacity: 0.5,\n      width: 1,\n    },\n    collisions: {\n      enable: false,\n    },\n    move: {\n      direction: \"right\",\n      enable: true,\n      outMode: \"bounce\",\n      random: true,\n      speed: 4,\n      straight: false,\n    },\n    number: {\n      density: {\n        enable: true,\n        value_area: 800,\n      },\n      value: 100,\n    },\n    opacity: {\n      value: 0.5,\n    },\n    shape: {\n      type: \"circle\",\n    },\n    size: {\n      random: true,\n      value: 5,\n    },\n  },\n  detectRetina: true,\n}\n\nexport default opitions;\n","import React from 'react';\nimport Particles from 'react-tsparticles';\nimport {Button} from 'react-bootstrap';\nimport Counter from './Counter';\nimport options from '../assets/particlesjs-config';\nimport '../assets/css/cover.css'\n\nfunction Cover() {\n    return (\n        <div id=\"cover\">\n            <Particles\n                id=\"tsparticles\"\n                options = {options}\n            />\n            <div className=\"coverHead\">\n                <div id=\"mainInfo\">\n                <div className=\"infoBox\">\n                    <div className=\"features\">\n                        <ion-icon name=\"calendar\"/>\n                        <p>24 a 28 OUT</p>\n                    </div>\n                    <div className=\"features\">\n                        <ion-icon name=\"people\"/>\n                        <p>12 Palestrantes</p>\n                    </div>\n                    <div className=\"features\">\n                        <ion-icon name=\"location\"/>\n                        <p>Even3</p>\n                    </div>\n                </div>\n                    <div id=\"logo\" />\n                    <button id=\"subscribeButton\" onClick={()=> alert('opa')}>Inscreva-se</button>\n                </div>\n                <div className=\"titleBox\">\n                    <h1>Futuro, Design,Tecnologia, Monetização e Eventos Corporativos</h1>\n                </div>\n            </div>\n           \n              <div className=\"counter\">\n                <Counter/>\n              </div>\n            </div>\n    )\n}\n\nexport default Cover;\n","import Cover from './Components/Cover';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Cover />\n      <h2>lorem</h2>\n      <h2>lorem</h2>\n      <h2>lorem</h2>\n      <h2>lorem</h2>\n      <h2>lorem</h2>\n      <h2>lorem</h2>\n      <h2>lorem</h2>\n      <h2>lorem</h2>\n      <h2>lorem</h2>\n      <h2>lorem</h2>\n      <h2>lorem</h2>\n      <h2>lorem</h2>\n      <h2>lorem</h2>\n      <h2>lorem</h2>\n      <h2>lorem</h2>\n      <h2>lorem</h2>\n      {/* <Cover /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}